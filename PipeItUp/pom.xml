<?xml version="1.0" encoding="UTF-8"?>

<project
		xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>ch.fhnw.ip12.pipeitup</groupId>
	<artifactId>PipeItUp</artifactId>
	<version>1.0-SNAPSHOT</version>

	<name>PipeItUp</name>
	<!-- FIXME change it to the project's website -->
	<url>https://fhnw.ch</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<exec.mainClass>ch.fhnw.ip12.pipeitup.app.PipeItUp</exec.mainClass>
<!--		<exec.commandlineArgs>&#45;&#45;softwareUi</exec.commandlineArgs>-->

		<!-- Project Dependencies -->
		<java.version>11</java.version>
		<junit.version>5.7.1</junit.version>

		<!-- Launcher options-->
		<pi.launcher.class>ch.fhnw.ip12.pipeitup.app/ch.fhnw.ip12.pipeitup.app.PipeItUp</pi.launcher.class>
		<pi.launcher.args/>

		<!-- Pi Remote Deployment -->
		<pi.remote.host/>
		<pi.remote.port>22</pi.remote.port>
		<pi.remote.username>pipeitup</pi.remote.username>
		<pi.remote.password>pipe-it-up!3</pi.remote.password>
		<pi.remote.target>/home/pipeitup/deploy</pi.remote.target>
		<pi.remote.jvmOptions/>

		<!-- Maven Dependencies -->
		<maven-antrun-plugin.version>3.0.0</maven-antrun-plugin.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<maven-dependency-plugin.version>3.1.2</maven-dependency-plugin.version>
		<maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
		<maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
		<exec-maven-plugin.version>3.0.0</exec-maven-plugin.version>


		<!-- Ant Dependencies -->
		<ant-jsch.version>1.10.9</ant-jsch.version>

		<sourceDirectory>${project.build.directory}/src/main/java</sourceDirectory>
	</properties>
	<repositories>
		<repository>
			<id>project-repository</id>
			<url>file://${project.basedir}/repository</url>
		</repository>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>11.0.2</version>
		</dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>11.0.2</version>
        </dependency>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>5.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>4.1.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.14.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.14.1</version>
		</dependency>
		<dependency>
			<groupId>com.github.mbelling</groupId>
			<artifactId>rpi-ws281x</artifactId>
			<version>2.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>com.diozero</groupId>
			<artifactId>diozero-core</artifactId>
			<version>1.3.1</version>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/java/resources</directory>
				<includes>
					<include>**/*.fxml</include>
					<include>**/*.css</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<!-- Copy runtime dependencies into distribution folder -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/distribution</outputDirectory>
							<includeScope>runtime</includeScope>
							<excludeTransitive>false</excludeTransitive>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Build final JAR file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<outputDirectory>${project.build.directory}/distribution</outputDirectory>
				</configuration>
			</plugin>

			<!-- Javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<additionalOptions>
						<additionalOption>--module-path</additionalOption>
						<additionalOption>${project.build.directory}/distribution</additionalOption>
					</additionalOptions>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>9</source>
					<target>9</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.7</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>default-check</id>
						<phase>test</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
						<rules>
							<rule>
							<element>BUNDLE</element>
							<limits>
								<limit>
								<counter>COMPLEXITY</counter>
								<value>COVEREDRATIO</value>
								<minimum>0.90</minimum>
								</limit>
							</limits>
							</rule>
						</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>${maven-dependency-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${exec-maven-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<!-- Run the JAR file locally -->
		<profile>
			<id>local-run</id>
			<activation>
				<property>
					<name>!pi.remote.host</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>sudo</executable>
							<commandlineArgs>java --module-path ${project.build.directory}/distribution --module
								${pi.launcher.class} ${pi.launcher.args} --softwareUi</commandlineArgs>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Transfer and run JAR with dependencies on remote pi -->
		<profile>
			<id>remote-run</id>
			<activation>
				<property>
					<name>pi.remote.host</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>transfer</id>
								<phase>install</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Ensure target directory exists on pi -->
										<sshexec host="${pi.remote.host}" port="${pi.remote.port}"
												 username="${pi.remote.username}" password="${pi.remote.password}"
												 trust="true" command="mkdir --parents ${pi.remote.target}"/>

										<!-- Transfer distribution folder to pi via SCP -->
										<scp trust="true"
											 todir="${pi.remote.username}:${pi.remote.password}@${pi.remote.host}:${pi.remote.target}"
											 port="${pi.remote.port}">
											<fileset dir="${project.build.directory}/distribution"/>
										</scp>
										<sshexec host="${pi.remote.host}" port="${pi.remote.port}"
												 username="${pi.remote.username}" password="${pi.remote.password}"
												 trust="true" command="rm ${pi.remote.target}/javafx-* &amp;&amp; cp /usr/share/openjfx/lib/javafx.* ${pi.remote.target}/"/>

										<!-- Run application on Raspberry Pi -->
										<sshexec host="${pi.remote.host}" port="${pi.remote.port}"
												 username="${pi.remote.username}" password="${pi.remote.password}"
												 trust="true"
												 failonerror="false" usepty="true" useSystemIn="true"
												 command="DISPLAY=:1 sudo java -Dprism.order=sw ${pi.remote.jvmOptions} --module-path ${pi.remote.target} --module ${pi.launcher.class} ${pi.launcher.args}"/>
									</target>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.apache.ant</groupId>
								<artifactId>ant-jsch</artifactId>
								<version>${ant-jsch.version}</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Activate JDWP server on pi, can be used for local and remote runs -->
		<profile>
			<id>debug</id>
			<properties>
				<pi.remote.jvmOptions>
					-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
				</pi.remote.jvmOptions>
			</properties>
		</profile>
	</profiles>
</project>
